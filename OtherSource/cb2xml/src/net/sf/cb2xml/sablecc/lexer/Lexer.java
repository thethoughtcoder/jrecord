/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.cb2xml.sablecc.lexer;

import java.io.*;
import java.util.*;
import net.sf.cb2xml.sablecc.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;

        if(gotoTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Lexer.class.getResourceAsStream("lexer.dat")));

                // read gotoTable
                int length = s.readInt();
                gotoTable = new int[length][][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][][];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        length = s.readInt();
                        gotoTable[i][j] = new int[length][3];
                        for(int k = 0; k < gotoTable[i][j].length; k++)
                        {
                            for(int l = 0; l < 3; l++)
                            {
                                gotoTable[i][j][k][l] = s.readInt();
                            }
                        }
                    }
                }

                // read accept
                length = s.readInt();
                accept = new int[length][];
                for(int i = 0; i < accept.length; i++)
                {
                    length = s.readInt();
                    accept[i] = new int[length];
                    for(int j = 0; j < accept[i].length; j++)
                    {
                        accept[i][j] = s.readInt();
                    }
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
            }
        }
    }

    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            Token token = new16(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            Token token = new17(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            Token token = new18(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            Token token = new19(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            Token token = new20(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            Token token = new21(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            Token token = new22(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            Token token = new23(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            Token token = new24(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            Token token = new25(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            Token token = new26(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            Token token = new27(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            Token token = new28(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            Token token = new29(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            Token token = new30(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            Token token = new31(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            Token token = new32(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            Token token = new33(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            Token token = new34(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            Token token = new35(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            Token token = new36(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            Token token = new37(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            Token token = new38(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            Token token = new39(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            Token token = new40(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 41:
                        {
                            Token token = new41(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 42:
                        {
                            Token token = new42(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 43:
                        {
                            Token token = new43(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 44:
                        {
                            Token token = new44(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 45:
                        {
                            Token token = new45(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 46:
                        {
                            Token token = new46(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 47:
                        {
                            Token token = new47(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 48:
                        {
                            Token token = new48(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 49:
                        {
                            Token token = new49(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 50:
                        {
                            Token token = new50(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 51:
                        {
                            Token token = new51(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 52:
                        {
                            Token token = new52(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 53:
                        {
                            Token token = new53(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 54:
                        {
                            Token token = new54(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 55:
                        {
                            Token token = new55(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 56:
                        {
                            Token token = new56(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 57:
                        {
                            Token token = new57(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 58:
                        {
                            Token token = new58(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 59:
                        {
                            Token token = new59(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 60:
                        {
                            Token token = new60(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 61:
                        {
                            Token token = new61(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 62:
                        {
                            Token token = new62(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 63:
                        {
                            Token token = new63(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 64:
                        {
                            Token token = new64(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 65:
                        {
                            Token token = new65(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 66:
                        {
                            Token token = new66(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 67:
                        {
                            Token token = new67(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 68:
                        {
                            Token token = new68(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 69:
                        {
                            Token token = new69(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 70:
                        {
                            Token token = new70(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 71:
                        {
                            Token token = new71(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 72:
                        {
                            Token token = new72(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 73:
                        {
                            Token token = new73(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 74:
                        {
                            Token token = new74(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 75:
                        {
                            Token token = new75(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 76:
                        {
                            Token token = new76(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 77:
                        {
                            Token token = new77(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 78:
                        {
                            Token token = new78(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 79:
                        {
                            Token token = new79(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 80:
                        {
                            Token token = new80(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(String text, int line, int pos) { return new TWhiteSpaces(text, line, pos); }
    Token new1(String text, int line, int pos) { return new TComment(text, line, pos); }
    Token new2(int line, int pos) { return new TDot(line, pos); }
    Token new3(int line, int pos) { return new TComma(line, pos); }
    Token new4(int line, int pos) { return new TSlash(line, pos); }
    Token new5(int line, int pos) { return new TPlus(line, pos); }
    Token new6(int line, int pos) { return new TMinus(line, pos); }
    Token new7(int line, int pos) { return new TStar(line, pos); }
    Token new8(int line, int pos) { return new TDollar(line, pos); }
    Token new9(int line, int pos) { return new TLparen(line, pos); }
    Token new10(int line, int pos) { return new TRparen(line, pos); }
    Token new11(String text, int line, int pos) { return new TNumber88(text, line, pos); }
    Token new12(String text, int line, int pos) { return new TNumberNot88(text, line, pos); }
    Token new13(String text, int line, int pos) { return new TAlphanumericLiteral(text, line, pos); }
    Token new14(String text, int line, int pos) { return new TNumericLiteral(text, line, pos); }
    Token new15(String text, int line, int pos) { return new TDotZee(text, line, pos); }
    Token new16(String text, int line, int pos) { return new TDotMinus(text, line, pos); }
    Token new17(String text, int line, int pos) { return new TDotPlus(text, line, pos); }
    Token new18(String text, int line, int pos) { return new TAll(text, line, pos); }
    Token new19(String text, int line, int pos) { return new TAre(text, line, pos); }
    Token new20(String text, int line, int pos) { return new TAscending(text, line, pos); }
    Token new21(String text, int line, int pos) { return new TBinary(text, line, pos); }
    Token new22(String text, int line, int pos) { return new TBlank(text, line, pos); }
    Token new23(String text, int line, int pos) { return new TBy(text, line, pos); }
    Token new24(String text, int line, int pos) { return new TCharacter(text, line, pos); }
    Token new25(String text, int line, int pos) { return new TComp(text, line, pos); }
    Token new26(String text, int line, int pos) { return new TComp1(text, line, pos); }
    Token new27(String text, int line, int pos) { return new TComp2(text, line, pos); }
    Token new28(String text, int line, int pos) { return new TComp3(text, line, pos); }
    Token new29(String text, int line, int pos) { return new TComp4(text, line, pos); }
    Token new30(String text, int line, int pos) { return new TComp5(text, line, pos); }
    Token new31(String text, int line, int pos) { return new TComp6(text, line, pos); }
    Token new32(String text, int line, int pos) { return new TDate(text, line, pos); }
    Token new33(String text, int line, int pos) { return new TDepending(text, line, pos); }
    Token new34(String text, int line, int pos) { return new TDescending(text, line, pos); }
    Token new35(String text, int line, int pos) { return new TDisplay(text, line, pos); }
    Token new36(String text, int line, int pos) { return new TDisplay1(text, line, pos); }
    Token new37(String text, int line, int pos) { return new TExternal(text, line, pos); }
    Token new38(String text, int line, int pos) { return new TFiller(text, line, pos); }
    Token new39(String text, int line, int pos) { return new TFormat(text, line, pos); }
    Token new40(String text, int line, int pos) { return new TFunctionPointer(text, line, pos); }
    Token new41(String text, int line, int pos) { return new TGlobal(text, line, pos); }
    Token new42(String text, int line, int pos) { return new THighValues(text, line, pos); }
    Token new43(String text, int line, int pos) { return new TIndex(text, line, pos); }
    Token new44(String text, int line, int pos) { return new TIndexed(text, line, pos); }
    Token new45(String text, int line, int pos) { return new TIs(text, line, pos); }
    Token new46(String text, int line, int pos) { return new TJustified(text, line, pos); }
    Token new47(String text, int line, int pos) { return new TKey(text, line, pos); }
    Token new48(String text, int line, int pos) { return new TLeading(text, line, pos); }
    Token new49(String text, int line, int pos) { return new TLeft(text, line, pos); }
    Token new50(String text, int line, int pos) { return new TLowValues(text, line, pos); }
    Token new51(String text, int line, int pos) { return new TNational(text, line, pos); }
    Token new52(String text, int line, int pos) { return new TNative(text, line, pos); }
    Token new53(String text, int line, int pos) { return new TNulls(text, line, pos); }
    Token new54(String text, int line, int pos) { return new TObject(text, line, pos); }
    Token new55(String text, int line, int pos) { return new TOccurs(text, line, pos); }
    Token new56(String text, int line, int pos) { return new TOn(text, line, pos); }
    Token new57(String text, int line, int pos) { return new TPackedDecimal(text, line, pos); }
    Token new58(String text, int line, int pos) { return new TPicture(text, line, pos); }
    Token new59(String text, int line, int pos) { return new TPointer(text, line, pos); }
    Token new60(String text, int line, int pos) { return new TProcedurePointer(text, line, pos); }
    Token new61(String text, int line, int pos) { return new TQuotes(text, line, pos); }
    Token new62(String text, int line, int pos) { return new TRedefines(text, line, pos); }
    Token new63(String text, int line, int pos) { return new TReference(text, line, pos); }
    Token new64(String text, int line, int pos) { return new TRenames(text, line, pos); }
    Token new65(String text, int line, int pos) { return new TRight(text, line, pos); }
    Token new66(String text, int line, int pos) { return new TSeparate(text, line, pos); }
    Token new67(String text, int line, int pos) { return new TSign(text, line, pos); }
    Token new68(String text, int line, int pos) { return new TSpaces(text, line, pos); }
    Token new69(String text, int line, int pos) { return new TSynchronized(text, line, pos); }
    Token new70(String text, int line, int pos) { return new TThrough(text, line, pos); }
    Token new71(String text, int line, int pos) { return new TTimes(text, line, pos); }
    Token new72(String text, int line, int pos) { return new TTo(text, line, pos); }
    Token new73(String text, int line, int pos) { return new TTrailing(text, line, pos); }
    Token new74(String text, int line, int pos) { return new TUsage(text, line, pos); }
    Token new75(String text, int line, int pos) { return new TValue(text, line, pos); }
    Token new76(String text, int line, int pos) { return new TValues(text, line, pos); }
    Token new77(String text, int line, int pos) { return new TWhen(text, line, pos); }
    Token new78(String text, int line, int pos) { return new TZeros(text, line, pos); }
    Token new79(String text, int line, int pos) { return new TDataName(text, line, pos); }
    Token new80(String text, int line, int pos) { return new TUnknown(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 12, 1}, {13, 13, 4}, {14, 31, 1}, {32, 32, 5}, {33, 33, 1}, {34, 34, 6}, {35, 35, 1}, {36, 36, 7}, {37, 38, 1}, {39, 39, 8}, {40, 40, 9}, {41, 41, 10}, {42, 42, 11}, {43, 43, 12}, {44, 44, 13}, {45, 45, 14}, {46, 46, 15}, {47, 47, 16}, {48, 55, 17}, {56, 56, 18}, {57, 57, 17}, {58, 64, 1}, {65, 65, 19}, {66, 66, 20}, {67, 67, 21}, {68, 68, 22}, {69, 69, 23}, {70, 70, 24}, {71, 71, 25}, {72, 72, 26}, {73, 73, 27}, {74, 74, 28}, {75, 75, 29}, {76, 76, 30}, {77, 77, 31}, {78, 78, 32}, {79, 79, 33}, {80, 80, 34}, {81, 81, 35}, {82, 82, 36}, {83, 83, 37}, {84, 84, 38}, {85, 85, 39}, {86, 86, 40}, {87, 87, 41}, {88, 88, 42}, {89, 89, 31}, {90, 90, 43}, {91, 96, 1}, {97, 97, 44}, {98, 98, 45}, {99, 99, 46}, {100, 100, 47}, {101, 101, 48}, {102, 102, 49}, {103, 103, 50}, {104, 104, 51}, {105, 105, 52}, {106, 106, 53}, {107, 107, 54}, {108, 108, 55}, {109, 109, 56}, {110, 110, 57}, {111, 111, 58}, {112, 112, 59}, {113, 113, 60}, {114, 114, 61}, {115, 115, 62}, {116, 116, 63}, {117, 117, 64}, {118, 118, 65}, {119, 119, 66}, {120, 121, 56}, {122, 122, 67}, {123, 65535, 1}, },
            {},
            {{9, 9, 68}, {10, 10, 69}, {13, 13, 70}, {32, 32, 71}, },
            {{9, 32, -4}, },
            {{9, 9, 68}, {10, 10, 72}, {13, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 9, 73}, {10, 10, 74}, {11, 12, 73}, {13, 13, 75}, {14, 33, 73}, {34, 34, 76}, {35, 65535, 73}, },
            {},
            {{0, 9, 77}, {10, 10, 78}, {11, 12, 77}, {13, 13, 79}, {14, 38, 77}, {39, 39, 80}, {40, 65535, 77}, },
            {},
            {},
            {{0, 9, 81}, {10, 10, 82}, {11, 12, 81}, {13, 13, 83}, {14, 65535, 81}, },
            {{46, 46, 84}, {48, 57, 85}, },
            {},
            {{45, 45, 86}, {46, 46, 84}, {48, 57, 87}, {65, 90, 88}, {97, 122, 89}, },
            {{45, 45, 90}, {48, 57, 91}, {90, 90, 92}, },
            {},
            {{45, 46, -16}, {48, 57, 93}, {65, 122, -16}, },
            {{45, 46, -16}, {48, 55, 93}, {56, 56, 94}, {57, 57, 93}, {65, 122, -16}, },
            {{45, 45, 86}, {48, 57, 95}, {65, 75, 88}, {76, 76, 96}, {77, 81, 88}, {82, 82, 97}, {83, 83, 98}, {84, 90, 88}, {97, 107, 89}, {108, 108, 99}, {109, 113, 89}, {114, 114, 100}, {115, 115, 101}, {116, 122, 89}, },
            {{45, 57, -21}, {65, 72, 88}, {73, 73, 102}, {74, 75, 88}, {76, 76, 103}, {77, 88, 88}, {89, 89, 104}, {90, 90, 88}, {97, 104, 89}, {105, 105, 105}, {106, 107, 89}, {108, 108, 106}, {109, 120, 89}, {121, 121, 107}, {122, 122, 89}, },
            {{45, 57, -21}, {65, 71, 88}, {72, 72, 108}, {73, 78, 88}, {79, 79, 109}, {80, 90, 88}, {97, 103, 89}, {104, 104, 110}, {105, 110, 89}, {111, 111, 111}, {112, 122, 89}, },
            {{45, 57, -21}, {65, 65, 112}, {66, 68, 88}, {69, 69, 113}, {70, 72, 88}, {73, 73, 114}, {74, 90, 88}, {97, 97, 115}, {98, 100, 89}, {101, 101, 116}, {102, 104, 89}, {105, 105, 117}, {106, 122, 89}, },
            {{45, 57, -21}, {65, 87, 88}, {88, 88, 118}, {89, 90, 88}, {97, 119, 89}, {120, 120, 119}, {121, 122, 89}, },
            {{45, 72, -22}, {73, 73, 120}, {74, 78, 88}, {79, 79, 121}, {80, 84, 88}, {85, 85, 122}, {86, 90, 88}, {97, 104, 89}, {105, 105, 123}, {106, 110, 89}, {111, 111, 124}, {112, 116, 89}, {117, 117, 125}, {118, 122, 89}, },
            {{45, 75, -21}, {76, 76, 126}, {77, 90, 88}, {97, 107, 89}, {108, 108, 127}, {109, 122, 89}, },
            {{45, 72, -22}, {73, 73, 128}, {74, 90, 88}, {97, 104, 89}, {105, 105, 129}, {106, 122, 89}, },
            {{45, 57, -21}, {65, 77, 88}, {78, 78, 130}, {79, 82, 88}, {83, 83, 131}, {84, 90, 88}, {97, 109, 89}, {110, 110, 132}, {111, 114, 89}, {115, 115, 133}, {116, 122, 89}, },
            {{45, 57, -21}, {65, 84, 88}, {85, 85, 134}, {86, 90, 88}, {97, 116, 89}, {117, 117, 135}, {118, 122, 89}, },
            {{45, 57, -21}, {65, 68, 88}, {69, 69, 136}, {70, 90, 88}, {97, 100, 89}, {101, 101, 137}, {102, 122, 89}, },
            {{45, 68, -31}, {69, 69, 138}, {70, 78, 88}, {79, 79, 139}, {80, 90, 88}, {97, 100, 89}, {101, 101, 140}, {102, 110, 89}, {111, 111, 141}, {112, 122, 89}, },
            {{45, 57, -21}, {65, 122, -16}, },
            {{45, 57, -21}, {65, 65, 142}, {66, 84, 88}, {85, 85, 143}, {86, 90, 88}, {97, 97, 144}, {98, 116, 89}, {117, 117, 145}, {118, 122, 89}, },
            {{45, 57, -21}, {65, 65, 88}, {66, 66, 146}, {67, 67, 147}, {68, 77, 88}, {78, 78, 148}, {79, 90, 88}, {97, 97, 89}, {98, 98, 149}, {99, 99, 150}, {100, 109, 89}, {110, 110, 151}, {111, 122, 89}, },
            {{45, 57, -21}, {65, 65, 152}, {66, 72, 88}, {73, 73, 153}, {74, 78, 88}, {79, 79, 154}, {80, 81, 88}, {82, 82, 155}, {83, 90, 88}, {97, 97, 156}, {98, 104, 89}, {105, 105, 157}, {106, 110, 89}, {111, 111, 158}, {112, 113, 89}, {114, 114, 159}, {115, 122, 89}, },
            {{45, 84, -30}, {85, 85, 160}, {86, 116, -30}, {117, 117, 161}, {118, 122, 89}, },
            {{45, 68, -31}, {69, 69, 162}, {70, 72, 88}, {73, 73, 163}, {74, 90, 88}, {97, 100, 89}, {101, 101, 164}, {102, 104, 89}, {105, 105, 165}, {106, 122, 89}, },
            {{45, 68, -31}, {69, 69, 166}, {70, 72, 88}, {73, 73, 167}, {74, 79, 88}, {80, 80, 168}, {81, 88, 88}, {89, 89, 169}, {90, 90, 88}, {97, 100, 89}, {101, 101, 170}, {102, 104, 89}, {105, 105, 171}, {106, 111, 89}, {112, 112, 172}, {113, 120, 89}, {121, 121, 173}, {122, 122, 89}, },
            {{45, 71, -23}, {72, 72, 174}, {73, 73, 175}, {74, 78, 88}, {79, 79, 176}, {80, 81, 88}, {82, 82, 177}, {83, 90, 88}, {97, 103, 89}, {104, 104, 178}, {105, 105, 179}, {106, 110, 89}, {111, 111, 180}, {112, 113, 89}, {114, 114, 181}, {115, 122, 89}, },
            {{45, 57, -21}, {65, 82, 88}, {83, 83, 182}, {84, 90, 88}, {97, 114, 89}, {115, 115, 183}, {116, 122, 89}, },
            {{45, 57, -21}, {65, 65, 184}, {66, 90, 88}, {97, 97, 185}, {98, 122, 89}, },
            {{45, 71, -23}, {72, 72, 186}, {73, 90, 88}, {97, 103, 89}, {104, 104, 187}, {105, 122, 89}, },
            {{34, 34, 188}, {39, 39, 189}, {45, 122, -33}, },
            {{45, 68, -31}, {69, 69, 190}, {70, 100, -31}, {101, 101, 191}, {102, 122, 89}, },
            {{45, 122, -21}, },
            {{45, 122, -22}, },
            {{45, 122, -23}, },
            {{45, 122, -24}, },
            {{45, 122, -25}, },
            {{45, 122, -26}, },
            {{45, 122, -27}, },
            {{45, 122, -28}, },
            {{45, 122, -29}, },
            {{45, 122, -30}, },
            {{45, 122, -31}, },
            {{45, 122, -32}, },
            {{45, 122, -33}, },
            {{45, 122, -34}, },
            {{45, 122, -35}, },
            {{45, 122, -36}, },
            {{45, 122, -37}, },
            {{45, 122, -38}, },
            {{45, 122, -39}, },
            {{45, 122, -40}, },
            {{45, 122, -41}, },
            {{45, 122, -42}, },
            {{45, 122, -43}, },
            {{45, 122, -45}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -6}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 65535, -8}, },
            {{0, 8, 73}, {9, 9, 192}, {10, 10, 193}, {11, 12, 73}, {13, 13, 194}, {14, 31, 73}, {32, 32, 195}, {33, 33, 73}, {34, 34, 76}, {35, 44, 73}, {45, 45, 196}, {46, 65535, 73}, },
            {{0, 9, -76}, {10, 10, 197}, {11, 65535, -76}, },
            {{34, 34, 198}, },
            {{0, 65535, -10}, },
            {{0, 8, 77}, {9, 9, 199}, {10, 10, 200}, {11, 12, 77}, {13, 13, 201}, {14, 31, 77}, {32, 32, 202}, {33, 38, 77}, {39, 39, 80}, {40, 44, 77}, {45, 45, 203}, {46, 65535, 77}, },
            {{0, 9, -80}, {10, 10, 204}, {11, 65535, -80}, },
            {{39, 39, 205}, },
            {{0, 65535, -13}, },
            {},
            {{10, 10, 206}, },
            {{48, 57, 91}, },
            {{46, 57, -14}, },
            {{45, 122, -33}, },
            {{45, 122, -16}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 45, 90}, },
            {{48, 57, 91}, {69, 69, 207}, },
            {{90, 90, 92}, },
            {{45, 122, -19}, },
            {{45, 122, -19}, },
            {{45, 122, -33}, },
            {{45, 75, -21}, {76, 76, 208}, {77, 107, -27}, {108, 108, 209}, {109, 122, 89}, },
            {{45, 68, -31}, {69, 69, 210}, {70, 100, -31}, {101, 101, 211}, {102, 122, 89}, },
            {{45, 57, -21}, {65, 66, 88}, {67, 67, 212}, {68, 90, 88}, {97, 98, 89}, {99, 99, 213}, {100, 122, 89}, },
            {{45, 122, -98}, },
            {{45, 122, -99}, },
            {{45, 122, -100}, },
            {{45, 77, -29}, {78, 78, 214}, {79, 90, 88}, {97, 109, 89}, {110, 110, 215}, {111, 122, 89}, },
            {{45, 57, -21}, {65, 65, 216}, {66, 90, 88}, {97, 97, 217}, {98, 122, 89}, },
            {{45, 122, -33}, },
            {{45, 122, -104}, },
            {{45, 122, -105}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 65, 218}, {66, 90, 88}, {97, 97, 219}, {98, 122, 89}, },
            {{45, 57, -21}, {65, 76, 88}, {77, 77, 220}, {78, 90, 88}, {97, 108, 89}, {109, 109, 221}, {110, 122, 89}, },
            {{45, 122, -110}, },
            {{45, 122, -111}, },
            {{45, 57, -21}, {65, 83, 88}, {84, 84, 222}, {85, 90, 88}, {97, 115, 89}, {116, 116, 223}, {117, 122, 89}, },
            {{45, 57, -21}, {65, 79, 88}, {80, 80, 224}, {81, 82, 88}, {83, 83, 225}, {84, 90, 88}, {97, 111, 89}, {112, 112, 226}, {113, 114, 89}, {115, 115, 227}, {116, 122, 89}, },
            {{45, 82, -41}, {83, 83, 228}, {84, 114, -41}, {115, 115, 229}, {116, 122, 89}, },
            {{45, 122, -114}, },
            {{45, 122, -115}, },
            {{45, 122, -116}, },
            {{45, 83, -114}, {84, 84, 230}, {85, 115, -114}, {116, 116, 231}, {117, 122, 89}, },
            {{45, 122, -120}, },
            {{45, 75, -21}, {76, 76, 232}, {77, 107, -27}, {108, 108, 233}, {109, 122, 89}, },
            {{45, 57, -21}, {65, 81, 88}, {82, 82, 234}, {83, 90, 88}, {97, 113, 89}, {114, 114, 235}, {115, 122, 89}, },
            {{45, 77, -29}, {78, 78, 236}, {79, 109, -104}, {110, 110, 237}, {111, 122, 89}, },
            {{45, 122, -122}, },
            {{45, 122, -123}, },
            {{45, 122, -124}, },
            {{45, 57, -21}, {65, 78, 88}, {79, 79, 238}, {80, 90, 88}, {97, 110, 89}, {111, 111, 239}, {112, 122, 89}, },
            {{45, 122, -128}, },
            {{45, 57, -21}, {65, 70, 88}, {71, 71, 240}, {72, 90, 88}, {97, 102, 89}, {103, 103, 241}, {104, 122, 89}, },
            {{45, 122, -130}, },
            {{45, 57, -21}, {65, 67, 88}, {68, 68, 242}, {69, 90, 88}, {97, 99, 89}, {100, 100, 243}, {101, 122, 89}, },
            {{45, 122, -33}, },
            {{45, 122, -132}, },
            {{45, 122, -33}, },
            {{45, 82, -41}, {83, 83, 244}, {84, 114, -41}, {115, 115, 245}, {116, 122, 89}, },
            {{45, 122, -136}, },
            {{45, 57, -21}, {65, 88, 88}, {89, 89, 246}, {90, 90, 88}, {97, 120, 89}, {121, 121, 247}, {122, 122, 89}, },
            {{45, 122, -138}, },
            {{45, 57, -21}, {65, 65, 248}, {66, 69, 88}, {70, 70, 249}, {71, 90, 88}, {97, 97, 250}, {98, 101, 89}, {102, 102, 251}, {103, 122, 89}, },
            {{45, 57, -21}, {65, 86, 88}, {87, 87, 252}, {88, 90, 88}, {97, 118, 89}, {119, 119, 253}, {120, 122, 89}, },
            {{45, 122, -140}, },
            {{45, 122, -141}, },
            {{45, 83, -114}, {84, 84, 254}, {85, 115, -114}, {116, 116, 255}, {117, 122, 89}, },
            {{45, 75, -21}, {76, 76, 256}, {77, 107, -27}, {108, 108, 257}, {109, 122, 89}, },
            {{45, 122, -144}, },
            {{45, 122, -145}, },
            {{45, 57, -21}, {65, 73, 88}, {74, 74, 258}, {75, 90, 88}, {97, 105, 89}, {106, 106, 259}, {107, 122, 89}, },
            {{45, 66, -100}, {67, 67, 260}, {68, 98, -100}, {99, 99, 261}, {100, 122, 89}, },
            {{45, 122, -33}, },
            {{45, 122, -148}, },
            {{45, 122, -149}, },
            {{45, 122, -33}, },
            {{45, 66, -100}, {67, 67, 262}, {68, 98, -100}, {99, 99, 263}, {100, 122, 89}, },
            {{45, 66, -100}, {67, 67, 264}, {68, 98, -100}, {99, 99, 265}, {100, 122, 89}, },
            {{45, 72, -22}, {73, 73, 266}, {74, 104, -28}, {105, 105, 267}, {106, 122, 89}, },
            {{45, 78, -128}, {79, 79, 268}, {80, 110, -128}, {111, 111, 269}, {112, 122, 89}, },
            {{45, 122, -154}, },
            {{45, 122, -155}, },
            {{45, 122, -156}, },
            {{45, 122, -157}, },
            {{45, 78, -128}, {79, 79, 270}, {80, 110, -128}, {111, 111, 271}, {112, 122, 89}, },
            {{45, 122, -162}, },
            {{45, 67, -132}, {68, 68, 272}, {69, 69, 88}, {70, 70, 273}, {71, 77, 88}, {78, 78, 274}, {79, 90, 88}, {97, 99, 89}, {100, 100, 275}, {101, 101, 89}, {102, 102, 276}, {103, 109, 89}, {110, 110, 277}, {111, 122, 89}, },
            {{45, 70, -130}, {71, 71, 278}, {72, 102, -130}, {103, 103, 279}, {104, 122, 89}, },
            {{45, 122, -164}, },
            {{45, 122, -165}, },
            {{45, 79, -115}, {80, 80, 280}, {81, 90, 88}, {97, 111, 89}, {112, 112, 281}, {113, 122, 89}, },
            {{45, 70, -130}, {71, 71, 282}, {72, 102, -130}, {103, 103, 283}, {104, 122, 89}, },
            {{45, 57, -21}, {65, 65, 284}, {66, 90, 88}, {97, 97, 285}, {98, 122, 89}, },
            {{45, 77, -29}, {78, 78, 286}, {79, 109, -104}, {110, 110, 287}, {111, 122, 89}, },
            {{45, 122, -168}, },
            {{45, 122, -169}, },
            {{45, 122, -170}, },
            {{45, 122, -171}, },
            {{45, 81, -123}, {82, 82, 288}, {83, 113, -123}, {114, 114, 289}, {115, 122, 89}, },
            {{45, 76, -111}, {77, 77, 290}, {78, 108, -111}, {109, 109, 291}, {110, 122, 89}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 65, 292}, {66, 90, 88}, {97, 97, 293}, {98, 122, 89}, },
            {{45, 122, -176}, },
            {{45, 122, -177}, },
            {{45, 122, -33}, },
            {{45, 122, -179}, },
            {{45, 57, -21}, {65, 65, 294}, {66, 90, 88}, {97, 97, 295}, {98, 122, 89}, },
            {{45, 122, -184}, },
            {{45, 75, -21}, {76, 76, 296}, {77, 107, -27}, {108, 108, 297}, {109, 122, 89}, },
            {{45, 122, -186}, },
            {{45, 68, -31}, {69, 69, 298}, {70, 100, -31}, {101, 101, 299}, {102, 122, 89}, },
            {{45, 122, -188}, },
            {{48, 57, 300}, {65, 70, 301}, {97, 102, 302}, },
            {{48, 57, 303}, {65, 70, 304}, {97, 102, 305}, },
            {{45, 81, -123}, {82, 82, 306}, {83, 113, -123}, {114, 114, 307}, {115, 122, 89}, },
            {{45, 122, -192}, },
            {{0, 34, -8}, {35, 65535, -76}, },
            {{0, 65535, -76}, },
            {{0, 9, -76}, {10, 10, 308}, {11, 65535, -76}, },
            {{0, 65535, -194}, },
            {{0, 8, 73}, {9, 9, 309}, {10, 10, 310}, {11, 12, 73}, {13, 13, 311}, {14, 31, 73}, {32, 32, 312}, {33, 34, -76}, {35, 65535, 73}, },
            {{0, 65535, -76}, },
            {{0, 65535, -8}, },
            {{0, 39, -10}, {40, 65535, -80}, },
            {{0, 65535, -80}, },
            {{0, 9, -80}, {10, 10, 313}, {11, 65535, -80}, },
            {{0, 65535, -201}, },
            {{0, 8, 77}, {9, 9, 314}, {10, 10, 315}, {11, 12, 77}, {13, 13, 316}, {14, 31, 77}, {32, 32, 317}, {33, 39, -80}, {40, 65535, 77}, },
            {{0, 65535, -80}, },
            {{0, 65535, -10}, },
            {},
            {{43, 43, 318}, {45, 45, 319}, {48, 57, 320}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 68, -31}, {69, 69, 321}, {70, 100, -31}, {101, 101, 322}, {102, 122, 89}, },
            {{45, 122, -214}, },
            {{45, 57, -21}, {65, 65, 323}, {66, 90, 88}, {97, 97, 324}, {98, 122, 89}, },
            {{45, 122, -216}, },
            {{45, 77, -29}, {78, 78, 325}, {79, 109, -104}, {110, 110, 326}, {111, 122, 89}, },
            {{45, 122, -218}, },
            {{45, 81, -123}, {82, 82, 327}, {83, 113, -123}, {114, 114, 328}, {115, 122, 89}, },
            {{45, 122, -220}, },
            {{45, 79, -115}, {80, 80, 329}, {81, 111, -168}, {112, 112, 330}, {113, 122, 89}, },
            {{45, 122, -222}, },
            {{45, 68, -31}, {69, 69, 331}, {70, 100, -31}, {101, 101, 332}, {102, 122, 89}, },
            {{45, 122, -224}, },
            {{45, 68, -31}, {69, 69, 333}, {70, 100, -31}, {101, 101, 334}, {102, 122, 89}, },
            {{45, 66, -100}, {67, 67, 335}, {68, 98, -100}, {99, 99, 336}, {100, 122, 89}, },
            {{45, 122, -226}, },
            {{45, 122, -227}, },
            {{45, 79, -115}, {80, 80, 337}, {81, 111, -168}, {112, 112, 338}, {113, 122, 89}, },
            {{45, 122, -230}, },
            {{45, 68, -31}, {69, 69, 339}, {70, 100, -31}, {101, 101, 340}, {102, 122, 89}, },
            {{45, 122, -232}, },
            {{45, 75, -21}, {76, 76, 341}, {77, 107, -27}, {108, 108, 342}, {109, 122, 89}, },
            {{45, 122, -234}, },
            {{45, 76, -111}, {77, 77, 343}, {78, 108, -111}, {109, 109, 344}, {110, 122, 89}, },
            {{45, 122, -236}, },
            {{45, 66, -100}, {67, 67, 345}, {68, 98, -100}, {99, 99, 346}, {100, 122, 89}, },
            {{45, 122, -238}, },
            {{45, 65, -35}, {66, 66, 347}, {67, 90, 88}, {97, 97, 89}, {98, 98, 348}, {99, 122, 89}, },
            {{45, 122, -240}, },
            {{45, 71, -23}, {72, 72, 349}, {73, 103, -43}, {104, 104, 350}, {105, 122, 89}, },
            {{45, 122, -242}, },
            {{45, 68, -31}, {69, 69, 351}, {70, 100, -31}, {101, 101, 352}, {102, 122, 89}, },
            {{45, 122, -244}, },
            {{45, 83, -114}, {84, 84, 353}, {85, 115, -114}, {116, 116, 354}, {117, 122, 89}, },
            {{45, 122, -246}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 67, -132}, {68, 68, 355}, {69, 99, -132}, {100, 100, 356}, {101, 122, 89}, },
            {{45, 83, -114}, {84, 84, 357}, {85, 115, -114}, {116, 116, 358}, {117, 122, 89}, },
            {{45, 122, -250}, },
            {{45, 122, -251}, },
            {{45, 45, 359}, {48, 122, -33}, },
            {{45, 122, -254}, },
            {{45, 72, -22}, {73, 73, 360}, {74, 104, -28}, {105, 105, 361}, {106, 122, 89}, },
            {{45, 122, -256}, },
            {{45, 75, -21}, {76, 76, 362}, {77, 107, -27}, {108, 108, 363}, {109, 122, 89}, },
            {{45, 122, -258}, },
            {{45, 68, -31}, {69, 69, 364}, {70, 100, -31}, {101, 101, 365}, {102, 122, 89}, },
            {{45, 122, -260}, },
            {{45, 84, -30}, {85, 85, 366}, {86, 116, -30}, {117, 117, 367}, {118, 122, 89}, },
            {{45, 122, -262}, },
            {{45, 57, -21}, {65, 74, 88}, {75, 75, 368}, {76, 90, 88}, {97, 106, 89}, {107, 107, 369}, {108, 122, 89}, },
            {{45, 122, -264}, },
            {{45, 83, -114}, {84, 84, 370}, {85, 115, -114}, {116, 116, 371}, {117, 122, 89}, },
            {{45, 122, -266}, },
            {{45, 77, -29}, {78, 78, 372}, {79, 109, -104}, {110, 110, 373}, {111, 122, 89}, },
            {{45, 122, -268}, },
            {{45, 66, -100}, {67, 67, 374}, {68, 98, -100}, {99, 99, 375}, {100, 122, 89}, },
            {{45, 122, -270}, },
            {{45, 83, -114}, {84, 84, 376}, {85, 115, -114}, {116, 116, 377}, {117, 122, 89}, },
            {{45, 122, -272}, },
            {{45, 68, -31}, {69, 69, 378}, {70, 100, -31}, {101, 101, 379}, {102, 122, 89}, },
            {{45, 68, -31}, {69, 69, 380}, {70, 100, -31}, {101, 101, 381}, {102, 122, 89}, },
            {{45, 57, -21}, {65, 65, 382}, {66, 90, 88}, {97, 97, 383}, {98, 122, 89}, },
            {{45, 122, -274}, },
            {{45, 122, -275}, },
            {{45, 122, -276}, },
            {{45, 71, -23}, {72, 72, 384}, {73, 103, -43}, {104, 104, 385}, {105, 122, 89}, },
            {{45, 122, -280}, },
            {{45, 57, -21}, {65, 65, 386}, {66, 90, 88}, {97, 97, 387}, {98, 122, 89}, },
            {{45, 122, -282}, },
            {{45, 77, -29}, {78, 78, 388}, {79, 109, -104}, {110, 110, 389}, {111, 122, 89}, },
            {{45, 122, -284}, },
            {{45, 66, -100}, {67, 67, 390}, {68, 98, -100}, {99, 99, 391}, {100, 122, 89}, },
            {{45, 122, -286}, },
            {{45, 66, -100}, {67, 67, 392}, {68, 98, -100}, {99, 99, 393}, {100, 122, 89}, },
            {{45, 122, -288}, },
            {{45, 78, -128}, {79, 79, 394}, {80, 84, 88}, {85, 85, 395}, {86, 90, 88}, {97, 110, 89}, {111, 111, 396}, {112, 116, 89}, {117, 117, 397}, {118, 122, 89}, },
            {{45, 122, -290}, },
            {{45, 68, -31}, {69, 69, 398}, {70, 100, -31}, {101, 101, 399}, {102, 122, 89}, },
            {{45, 122, -292}, },
            {{45, 72, -22}, {73, 73, 400}, {74, 104, -28}, {105, 105, 401}, {106, 122, 89}, },
            {{45, 122, -294}, },
            {{45, 70, -130}, {71, 71, 402}, {72, 102, -130}, {103, 103, 403}, {104, 122, 89}, },
            {{45, 122, -296}, },
            {{45, 84, -30}, {85, 85, 404}, {86, 116, -30}, {117, 117, 405}, {118, 122, 89}, },
            {{45, 122, -298}, },
            {{45, 77, -29}, {78, 78, 406}, {79, 109, -104}, {110, 110, 407}, {111, 122, 89}, },
            {{45, 122, -300}, },
            {{48, 57, 408}, {65, 70, 409}, {97, 102, 410}, },
            {{48, 102, -302}, },
            {{48, 102, -302}, },
            {{48, 57, 411}, {65, 70, 412}, {97, 102, 413}, },
            {{48, 102, -305}, },
            {{48, 102, -305}, },
            {{45, 78, -128}, {79, 79, 414}, {80, 110, -128}, {111, 111, 415}, {112, 122, 89}, },
            {{45, 122, -308}, },
            {{0, 65535, -76}, },
            {{0, 33, -198}, {34, 34, 416}, {35, 65535, 73}, },
            {{0, 8, 73}, {9, 9, 417}, {10, 10, 418}, {11, 12, 73}, {13, 13, 419}, {14, 31, 73}, {32, 32, 420}, {33, 34, -311}, {35, 65535, -76}, },
            {{0, 9, -312}, {10, 10, 421}, {11, 65535, -312}, },
            {{0, 65535, -311}, },
            {{0, 65535, -80}, },
            {{0, 38, -205}, {39, 39, 422}, {40, 65535, 77}, },
            {{0, 8, 77}, {9, 9, 423}, {10, 10, 424}, {11, 12, 77}, {13, 13, 425}, {14, 31, 77}, {32, 32, 426}, {33, 39, -316}, {40, 65535, -80}, },
            {{0, 9, -317}, {10, 10, 427}, {11, 65535, -317}, },
            {{0, 65535, -316}, },
            {{48, 57, 320}, },
            {{48, 57, 320}, },
            {{48, 57, 320}, },
            {{45, 77, -29}, {78, 78, 428}, {79, 109, -104}, {110, 110, 429}, {111, 122, 89}, },
            {{45, 122, -323}, },
            {{45, 81, -123}, {82, 82, 430}, {83, 113, -123}, {114, 114, 431}, {115, 122, 89}, },
            {{45, 122, -325}, },
            {{45, 74, -264}, {75, 75, 432}, {76, 106, -264}, {107, 107, 433}, {108, 122, 89}, },
            {{45, 122, -327}, },
            {{45, 57, -21}, {65, 65, 434}, {66, 90, 88}, {97, 97, 435}, {98, 122, 89}, },
            {{45, 122, -329}, },
            {{45, 45, 436}, {48, 84, -30}, {85, 85, 437}, {86, 116, -30}, {117, 117, 438}, {118, 122, 89}, },
            {{45, 122, -331}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 77, -29}, {78, 78, 439}, {79, 109, -104}, {110, 110, 440}, {111, 122, 89}, },
            {{45, 122, -335}, },
            {{45, 68, -31}, {69, 69, 441}, {70, 100, -31}, {101, 101, 442}, {102, 122, 89}, },
            {{45, 122, -337}, },
            {{45, 75, -21}, {76, 76, 443}, {77, 107, -27}, {108, 108, 444}, {109, 122, 89}, },
            {{45, 122, -339}, },
            {{45, 81, -123}, {82, 82, 445}, {83, 113, -123}, {114, 114, 446}, {115, 122, 89}, },
            {{45, 122, -341}, },
            {{45, 68, -31}, {69, 69, 447}, {70, 100, -31}, {101, 101, 448}, {102, 122, 89}, },
            {{45, 122, -343}, },
            {{45, 57, -21}, {65, 65, 449}, {66, 90, 88}, {97, 97, 450}, {98, 122, 89}, },
            {{45, 122, -345}, },
            {{45, 83, -114}, {84, 84, 451}, {85, 115, -114}, {116, 116, 452}, {117, 122, 89}, },
            {{45, 122, -347}, },
            {{45, 57, -21}, {65, 65, 453}, {66, 90, 88}, {97, 97, 454}, {98, 122, 89}, },
            {{45, 122, -349}, },
            {{45, 45, 455}, {48, 122, -33}, },
            {{45, 122, -351}, },
            {{45, 87, -25}, {88, 88, 456}, {89, 119, -25}, {120, 120, 457}, {121, 122, 89}, },
            {{45, 122, -353}, },
            {{45, 72, -22}, {73, 73, 458}, {74, 104, -28}, {105, 105, 459}, {106, 122, 89}, },
            {{45, 122, -355}, },
            {{45, 72, -22}, {73, 73, 460}, {74, 104, -28}, {105, 105, 461}, {106, 122, 89}, },
            {{45, 122, -357}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 85, 88}, {86, 86, 462}, {87, 90, 88}, {97, 117, 89}, {118, 118, 463}, {119, 122, 89}, },
            {{45, 78, -128}, {79, 79, 464}, {80, 85, 88}, {86, 86, 465}, {87, 90, 88}, {97, 110, 89}, {111, 111, 466}, {112, 117, 89}, {118, 118, 467}, {119, 122, 89}, },
            {{45, 122, -362}, },
            {{45, 82, -41}, {83, 83, 468}, {84, 114, -41}, {115, 115, 469}, {116, 122, 89}, },
            {{45, 122, -364}, },
            {{45, 66, -100}, {67, 67, 470}, {68, 98, -100}, {99, 99, 471}, {100, 122, 89}, },
            {{45, 122, -366}, },
            {{45, 81, -123}, {82, 82, 472}, {83, 113, -123}, {114, 114, 473}, {115, 122, 89}, },
            {{45, 122, -368}, },
            {{45, 68, -31}, {69, 69, 474}, {70, 100, -31}, {101, 101, 475}, {102, 122, 89}, },
            {{45, 122, -370}, },
            {{45, 84, -30}, {85, 85, 476}, {86, 116, -30}, {117, 117, 477}, {118, 122, 89}, },
            {{45, 122, -372}, },
            {{45, 83, -114}, {84, 84, 478}, {85, 115, -114}, {116, 116, 479}, {117, 122, 89}, },
            {{45, 122, -374}, },
            {{45, 68, -31}, {69, 69, 480}, {70, 100, -31}, {101, 101, 481}, {102, 122, 89}, },
            {{45, 122, -376}, },
            {{45, 68, -31}, {69, 69, 482}, {70, 100, -31}, {101, 101, 483}, {102, 122, 89}, },
            {{45, 122, -378}, },
            {{45, 57, -21}, {65, 69, 88}, {70, 70, 484}, {71, 90, 88}, {97, 101, 89}, {102, 102, 485}, {103, 122, 89}, },
            {{45, 122, -380}, },
            {{45, 81, -123}, {82, 82, 486}, {83, 113, -123}, {114, 114, 487}, {115, 122, 89}, },
            {{45, 122, -382}, },
            {{45, 76, -111}, {77, 77, 488}, {78, 108, -111}, {109, 109, 489}, {110, 122, 89}, },
            {{45, 122, -384}, },
            {{45, 83, -114}, {84, 84, 490}, {85, 115, -114}, {116, 116, 491}, {117, 122, 89}, },
            {{45, 122, -386}, },
            {{45, 81, -123}, {82, 82, 492}, {83, 113, -123}, {114, 114, 493}, {115, 122, 89}, },
            {{45, 122, -388}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 68, -31}, {69, 69, 494}, {70, 100, -31}, {101, 101, 495}, {102, 122, 89}, },
            {{45, 122, -392}, },
            {{45, 71, -23}, {72, 72, 496}, {73, 103, -43}, {104, 104, 497}, {105, 122, 89}, },
            {{45, 122, -394}, },
            {{45, 84, -30}, {85, 85, 498}, {86, 116, -30}, {117, 117, 499}, {118, 122, 89}, },
            {{45, 122, -33}, },
            {{45, 122, -396}, },
            {{45, 122, -33}, },
            {{45, 82, -41}, {83, 83, 500}, {84, 114, -41}, {115, 115, 501}, {116, 122, 89}, },
            {{45, 122, -400}, },
            {{45, 75, -21}, {76, 76, 502}, {77, 107, -27}, {108, 108, 503}, {109, 122, 89}, },
            {{45, 122, -402}, },
            {{45, 68, -31}, {69, 69, 504}, {70, 100, -31}, {101, 101, 505}, {102, 122, 89}, },
            {{45, 122, -404}, },
            {{45, 68, -31}, {69, 69, 506}, {70, 100, -31}, {101, 101, 507}, {102, 122, 89}, },
            {{45, 122, -406}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{34, 34, 508}, {48, 102, -190}, },
            {{34, 102, -410}, },
            {{34, 102, -410}, },
            {{39, 39, 509}, {48, 102, -191}, },
            {{39, 102, -413}, },
            {{39, 102, -413}, },
            {{45, 68, -31}, {69, 69, 510}, {70, 82, 88}, {83, 83, 511}, {84, 90, 88}, {97, 100, 89}, {101, 101, 512}, {102, 114, 89}, {115, 115, 513}, {116, 122, 89}, },
            {{45, 122, -416}, },
            {{0, 33, -8}, {34, 34, 514}, {35, 65535, 73}, },
            {{0, 34, -311}, {35, 65535, -76}, },
            {{0, 65535, -312}, },
            {{0, 9, -312}, {10, 10, 515}, {11, 65535, -312}, },
            {{0, 65535, -419}, },
            {{0, 65535, -312}, },
            {{0, 38, -10}, {39, 39, 516}, {40, 65535, 77}, },
            {{0, 39, -316}, {40, 65535, -80}, },
            {{0, 65535, -317}, },
            {{0, 9, -317}, {10, 10, 517}, {11, 65535, -317}, },
            {{0, 65535, -425}, },
            {{0, 65535, -317}, },
            {{45, 67, -132}, {68, 68, 518}, {69, 99, -132}, {100, 100, 519}, {101, 122, 89}, },
            {{45, 122, -430}, },
            {{45, 88, -138}, {89, 89, 520}, {90, 120, -138}, {121, 121, 521}, {122, 122, 89}, },
            {{45, 122, -432}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 66, -100}, {67, 67, 522}, {68, 98, -100}, {99, 99, 523}, {100, 122, 89}, },
            {{45, 122, -436}, },
            {{45, 45, 86}, {48, 48, 95}, {49, 49, 524}, {50, 50, 525}, {51, 51, 526}, {52, 52, 527}, {53, 53, 528}, {54, 54, 529}, {55, 57, 95}, {65, 122, -16}, },
            {{45, 83, -114}, {84, 84, 530}, {85, 115, -114}, {116, 116, 531}, {117, 122, 89}, },
            {{45, 122, -439}, },
            {{45, 67, -132}, {68, 68, 532}, {69, 99, -132}, {100, 100, 533}, {101, 122, 89}, },
            {{45, 122, -441}, },
            {{45, 77, -29}, {78, 78, 534}, {79, 109, -104}, {110, 110, 535}, {111, 122, 89}, },
            {{45, 122, -443}, },
            {{45, 57, -21}, {65, 65, 536}, {66, 90, 88}, {97, 97, 537}, {98, 122, 89}, },
            {{45, 122, -445}, },
            {{45, 77, -29}, {78, 78, 538}, {79, 109, -104}, {110, 110, 539}, {111, 122, 89}, },
            {{45, 122, -447}, },
            {{45, 81, -123}, {82, 82, 540}, {83, 113, -123}, {114, 114, 541}, {115, 122, 89}, },
            {{45, 122, -449}, },
            {{45, 83, -114}, {84, 84, 542}, {85, 115, -114}, {116, 116, 543}, {117, 122, 89}, },
            {{45, 122, -451}, },
            {{45, 72, -22}, {73, 73, 544}, {74, 104, -28}, {105, 105, 545}, {106, 122, 89}, },
            {{45, 122, -453}, },
            {{45, 75, -21}, {76, 76, 546}, {77, 107, -27}, {108, 108, 547}, {109, 122, 89}, },
            {{45, 122, -455}, },
            {{45, 85, -361}, {86, 86, 548}, {87, 117, -361}, {118, 118, 549}, {119, 122, 89}, },
            {{45, 68, -31}, {69, 69, 550}, {70, 100, -31}, {101, 101, 551}, {102, 122, 89}, },
            {{45, 122, -458}, },
            {{45, 69, -380}, {70, 70, 552}, {71, 101, -380}, {102, 102, 553}, {103, 122, 89}, },
            {{45, 122, -460}, },
            {{45, 77, -29}, {78, 78, 554}, {79, 109, -104}, {110, 110, 555}, {111, 122, 89}, },
            {{45, 122, -462}, },
            {{45, 57, -21}, {65, 65, 556}, {66, 90, 88}, {97, 97, 557}, {98, 122, 89}, },
            {{45, 122, -464}, },
            {{45, 77, -29}, {78, 78, 558}, {79, 109, -104}, {110, 110, 559}, {111, 122, 89}, },
            {{45, 68, -31}, {69, 69, 560}, {70, 100, -31}, {101, 101, 561}, {102, 122, 89}, },
            {{45, 122, -466}, },
            {{45, 122, -467}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 83, -114}, {84, 84, 562}, {85, 115, -114}, {116, 116, 563}, {117, 122, 89}, },
            {{45, 122, -472}, },
            {{45, 82, -41}, {83, 83, 564}, {84, 114, -41}, {115, 115, 565}, {116, 122, 89}, },
            {{45, 122, -474}, },
            {{45, 67, -132}, {68, 68, 566}, {69, 99, -132}, {100, 100, 567}, {101, 122, 89}, },
            {{45, 122, -476}, },
            {{45, 81, -123}, {82, 82, 568}, {83, 113, -123}, {114, 114, 569}, {115, 122, 89}, },
            {{45, 122, -478}, },
            {{45, 68, -31}, {69, 69, 570}, {70, 100, -31}, {101, 101, 571}, {102, 122, 89}, },
            {{45, 122, -480}, },
            {{45, 67, -132}, {68, 68, 572}, {69, 99, -132}, {100, 100, 573}, {101, 122, 89}, },
            {{45, 122, -482}, },
            {{45, 82, -41}, {83, 83, 574}, {84, 114, -41}, {115, 115, 575}, {116, 122, 89}, },
            {{45, 122, -484}, },
            {{45, 72, -22}, {73, 73, 576}, {74, 104, -28}, {105, 105, 577}, {106, 122, 89}, },
            {{45, 122, -486}, },
            {{45, 68, -31}, {69, 69, 578}, {70, 100, -31}, {101, 101, 579}, {102, 122, 89}, },
            {{45, 122, -488}, },
            {{45, 68, -31}, {69, 69, 580}, {70, 100, -31}, {101, 101, 581}, {102, 122, 89}, },
            {{45, 122, -490}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 65, 582}, {66, 90, 88}, {97, 97, 583}, {98, 122, 89}, },
            {{45, 122, -494}, },
            {{45, 82, -41}, {83, 83, 584}, {84, 114, -41}, {115, 115, 585}, {116, 122, 89}, },
            {{45, 122, -496}, },
            {{45, 81, -123}, {82, 82, 586}, {83, 113, -123}, {114, 114, 587}, {115, 122, 89}, },
            {{45, 122, -498}, },
            {{45, 70, -130}, {71, 71, 588}, {72, 102, -130}, {103, 103, 589}, {104, 122, 89}, },
            {{45, 122, -500}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 72, -22}, {73, 73, 590}, {74, 104, -28}, {105, 105, 591}, {106, 122, 89}, },
            {{45, 122, -504}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 82, -41}, {83, 83, 592}, {84, 114, -41}, {115, 115, 593}, {116, 122, 89}, },
            {{45, 122, -508}, },
            {},
            {},
            {{45, 82, -41}, {83, 83, 594}, {84, 114, -41}, {115, 115, 595}, {116, 122, 89}, },
            {{45, 122, -33}, },
            {{45, 122, -512}, },
            {{45, 122, -33}, },
            {{0, 65535, -418}, },
            {{0, 65535, -312}, },
            {{0, 65535, -424}, },
            {{0, 65535, -317}, },
            {{45, 72, -22}, {73, 73, 596}, {74, 104, -28}, {105, 105, 597}, {106, 122, 89}, },
            {{45, 122, -520}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 83, -114}, {84, 84, 598}, {85, 115, -114}, {116, 116, 599}, {117, 122, 89}, },
            {{45, 122, -524}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 65, 600}, {66, 90, 88}, {97, 97, 601}, {98, 122, 89}, },
            {{45, 122, -532}, },
            {{45, 72, -22}, {73, 73, 602}, {74, 104, -28}, {105, 105, 603}, {106, 122, 89}, },
            {{45, 122, -534}, },
            {{45, 67, -132}, {68, 68, 604}, {69, 99, -132}, {100, 100, 605}, {101, 122, 89}, },
            {{45, 122, -536}, },
            {{45, 88, -138}, {89, 89, 606}, {90, 120, -138}, {121, 121, 607}, {122, 122, 89}, },
            {{45, 122, -538}, },
            {{45, 57, -21}, {65, 65, 608}, {66, 90, 88}, {97, 97, 609}, {98, 122, 89}, },
            {{45, 122, -540}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 78, -128}, {79, 79, 610}, {80, 110, -128}, {111, 111, 611}, {112, 122, 89}, },
            {{45, 122, -546}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 65, 612}, {66, 90, 88}, {97, 97, 613}, {98, 122, 89}, },
            {{45, 122, -550}, },
            {{45, 67, -132}, {68, 68, 614}, {69, 99, -132}, {100, 100, 615}, {101, 122, 89}, },
            {{45, 122, -552}, },
            {{45, 72, -22}, {73, 73, 616}, {74, 104, -28}, {105, 105, 617}, {106, 122, 89}, },
            {{45, 122, -554}, },
            {{45, 70, -130}, {71, 71, 618}, {72, 102, -130}, {103, 103, 619}, {104, 122, 89}, },
            {{45, 122, -556}, },
            {{45, 75, -21}, {76, 76, 620}, {77, 107, -27}, {108, 108, 621}, {109, 122, 89}, },
            {{45, 122, -558}, },
            {{45, 57, -21}, {65, 65, 622}, {66, 90, 88}, {97, 97, 623}, {98, 122, 89}, },
            {{45, 122, -560}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 45, 624}, {48, 122, -33}, },
            {{45, 122, -568}, },
            {{45, 68, -31}, {69, 69, 625}, {70, 100, -31}, {101, 101, 626}, {102, 122, 89}, },
            {{45, 122, -570}, },
            {{45, 81, -123}, {82, 82, 627}, {83, 113, -123}, {114, 114, 628}, {115, 122, 89}, },
            {{45, 122, -572}, },
            {{45, 84, -30}, {85, 85, 629}, {86, 116, -30}, {117, 117, 630}, {118, 122, 89}, },
            {{45, 122, -574}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 77, -29}, {78, 78, 631}, {79, 109, -104}, {110, 110, 632}, {111, 122, 89}, },
            {{45, 122, -578}, },
            {{45, 77, -29}, {78, 78, 633}, {79, 109, -104}, {110, 110, 634}, {111, 122, 89}, },
            {{45, 122, -580}, },
            {{45, 82, -41}, {83, 83, 635}, {84, 114, -41}, {115, 115, 636}, {116, 122, 89}, },
            {{45, 122, -582}, },
            {{45, 83, -114}, {84, 84, 637}, {85, 115, -114}, {116, 116, 638}, {117, 122, 89}, },
            {{45, 122, -584}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 78, -128}, {79, 79, 639}, {80, 110, -128}, {111, 111, 640}, {112, 122, 89}, },
            {{45, 122, -588}, },
            {{45, 71, -23}, {72, 72, 641}, {73, 103, -43}, {104, 104, 642}, {105, 122, 89}, },
            {{45, 122, -590}, },
            {{45, 77, -29}, {78, 78, 643}, {79, 109, -104}, {110, 110, 644}, {111, 122, 89}, },
            {{45, 122, -592}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 77, -29}, {78, 78, 645}, {79, 109, -104}, {110, 110, 646}, {111, 122, 89}, },
            {{45, 122, -598}, },
            {{45, 68, -31}, {69, 69, 647}, {70, 100, -31}, {101, 101, 648}, {102, 122, 89}, },
            {{45, 122, -600}, },
            {{45, 83, -114}, {84, 84, 649}, {85, 115, -114}, {116, 116, 650}, {117, 122, 89}, },
            {{45, 122, -602}, },
            {{45, 77, -29}, {78, 78, 651}, {79, 109, -104}, {110, 110, 652}, {111, 122, 89}, },
            {{45, 122, -604}, },
            {{45, 72, -22}, {73, 73, 653}, {74, 104, -28}, {105, 105, 654}, {106, 122, 89}, },
            {{45, 122, -606}, },
            {{45, 45, 655}, {48, 122, -33}, },
            {{45, 122, -608}, },
            {{45, 75, -21}, {76, 76, 656}, {77, 107, -27}, {108, 108, 657}, {109, 122, 89}, },
            {{45, 122, -610}, },
            {{45, 77, -29}, {78, 78, 658}, {79, 109, -104}, {110, 110, 659}, {111, 122, 89}, },
            {{45, 122, -612}, },
            {{45, 75, -21}, {76, 76, 660}, {77, 107, -27}, {108, 108, 661}, {109, 122, 89}, },
            {{45, 122, -614}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 68, -31}, {69, 69, 662}, {70, 100, -31}, {101, 101, 663}, {102, 122, 89}, },
            {{45, 122, -618}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 84, -30}, {85, 85, 664}, {86, 116, -30}, {117, 117, 665}, {118, 122, 89}, },
            {{45, 122, -622}, },
            {{45, 75, -21}, {76, 76, 666}, {77, 107, -27}, {108, 108, 667}, {109, 122, 89}, },
            {{45, 122, -624}, },
            {{45, 67, -132}, {68, 68, 668}, {69, 99, -132}, {100, 100, 669}, {101, 122, 89}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 81, -123}, {82, 82, 670}, {83, 113, -123}, {114, 114, 671}, {115, 122, 89}, },
            {{45, 122, -631}, },
            {{45, 68, -31}, {69, 69, 672}, {70, 100, -31}, {101, 101, 673}, {102, 122, 89}, },
            {{45, 122, -633}, },
            {{45, 66, -100}, {67, 67, 674}, {68, 98, -100}, {99, 99, 675}, {100, 122, 89}, },
            {{45, 122, -635}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 68, -31}, {69, 69, 676}, {70, 100, -31}, {101, 101, 677}, {102, 122, 89}, },
            {{45, 122, -639}, },
            {{45, 77, -29}, {78, 78, 678}, {79, 109, -104}, {110, 110, 679}, {111, 122, 89}, },
            {{45, 122, -641}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 70, -130}, {71, 71, 680}, {72, 102, -130}, {103, 103, 681}, {104, 122, 89}, },
            {{45, 122, -645}, },
            {{45, 70, -130}, {71, 71, 682}, {72, 102, -130}, {103, 103, 683}, {104, 122, 89}, },
            {{45, 122, -647}, },
            {{45, 81, -123}, {82, 82, 684}, {83, 113, -123}, {114, 114, 685}, {115, 122, 89}, },
            {{45, 122, -649}, },
            {{45, 72, -22}, {73, 73, 686}, {74, 104, -28}, {105, 105, 687}, {106, 122, 89}, },
            {{45, 122, -651}, },
            {{45, 70, -130}, {71, 71, 688}, {72, 102, -130}, {103, 103, 689}, {104, 122, 89}, },
            {{45, 122, -653}, },
            {{45, 77, -29}, {78, 78, 690}, {79, 109, -104}, {110, 110, 691}, {111, 122, 89}, },
            {{45, 122, -655}, },
            {{45, 48, -438}, {49, 49, 692}, {50, 57, 95}, {65, 122, -16}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 45, 693}, {48, 122, -33}, },
            {{45, 122, -660}, },
            {{45, 84, -30}, {85, 85, 694}, {86, 116, -30}, {117, 117, 695}, {118, 122, 89}, },
            {{45, 122, -662}, },
            {{45, 67, -132}, {68, 68, 696}, {69, 99, -132}, {100, 100, 697}, {101, 122, 89}, },
            {{45, 122, -664}, },
            {{45, 68, -31}, {69, 69, 698}, {70, 100, -31}, {101, 101, 699}, {102, 122, 89}, },
            {{45, 122, -666}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 68, -31}, {69, 69, 700}, {70, 100, -31}, {101, 101, 701}, {102, 122, 89}, },
            {{45, 122, -670}, },
            {{45, 68, -31}, {69, 69, 702}, {70, 100, -31}, {101, 101, 703}, {102, 122, 89}, },
            {{45, 122, -672}, },
            {{45, 82, -41}, {83, 83, 704}, {84, 114, -41}, {115, 115, 705}, {116, 122, 89}, },
            {{45, 122, -674}, },
            {{45, 68, -31}, {69, 69, 706}, {70, 100, -31}, {101, 101, 707}, {102, 122, 89}, },
            {{45, 122, -676}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 72, -22}, {73, 73, 708}, {74, 104, -28}, {105, 105, 709}, {106, 122, 89}, },
            {{45, 122, -680}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 78, -128}, {79, 79, 710}, {80, 110, -128}, {111, 111, 711}, {112, 122, 89}, },
            {{45, 122, -688}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 70, -130}, {71, 71, 712}, {72, 102, -130}, {103, 103, 713}, {104, 122, 89}, },
            {{45, 122, -692}, },
            {{45, 122, -33}, },
            {{45, 79, -115}, {80, 80, 714}, {81, 111, -168}, {112, 112, 715}, {113, 122, 89}, },
            {{45, 68, -31}, {69, 69, 716}, {70, 100, -31}, {101, 101, 717}, {102, 122, 89}, },
            {{45, 122, -696}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 82, -41}, {83, 83, 718}, {84, 114, -41}, {115, 115, 719}, {116, 122, 89}, },
            {{45, 122, -700}, },
            {{45, 66, -100}, {67, 67, 720}, {68, 98, -100}, {99, 99, 721}, {100, 122, 89}, },
            {{45, 122, -702}, },
            {{45, 45, 722}, {48, 122, -33}, },
            {{45, 122, -704}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 89, 88}, {90, 90, 723}, {97, 121, 89}, {122, 122, 724}, },
            {{45, 122, -710}, },
            {{45, 77, -29}, {78, 78, 725}, {79, 109, -104}, {110, 110, 726}, {111, 122, 89}, },
            {{45, 122, -712}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 78, -128}, {79, 79, 727}, {80, 110, -128}, {111, 111, 728}, {112, 122, 89}, },
            {{45, 122, -716}, },
            {{45, 82, -41}, {83, 83, 729}, {84, 114, -41}, {115, 115, 730}, {116, 122, 89}, },
            {{45, 122, -718}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 72, -22}, {73, 73, 731}, {74, 104, -28}, {105, 105, 732}, {106, 122, 89}, },
            {{45, 122, -722}, },
            {{45, 79, -115}, {80, 80, 733}, {81, 111, -168}, {112, 112, 734}, {113, 122, 89}, },
            {{45, 68, -31}, {69, 69, 735}, {70, 100, -31}, {101, 101, 736}, {102, 122, 89}, },
            {{45, 122, -725}, },
            {{45, 57, -21}, {65, 65, 737}, {66, 90, 88}, {97, 97, 738}, {98, 122, 89}, },
            {{45, 122, -727}, },
            {{45, 72, -22}, {73, 73, 739}, {74, 104, -28}, {105, 105, 740}, {106, 122, 89}, },
            {{45, 122, -729}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 76, -111}, {77, 77, 741}, {78, 108, -111}, {109, 109, 742}, {110, 122, 89}, },
            {{45, 122, -733}, },
            {{45, 78, -128}, {79, 79, 743}, {80, 110, -128}, {111, 111, 744}, {112, 122, 89}, },
            {{45, 122, -735}, },
            {{45, 67, -132}, {68, 68, 745}, {69, 99, -132}, {100, 100, 746}, {101, 122, 89}, },
            {{45, 122, -737}, },
            {{45, 75, -21}, {76, 76, 747}, {77, 107, -27}, {108, 108, 748}, {109, 122, 89}, },
            {{45, 122, -739}, },
            {{45, 77, -29}, {78, 78, 749}, {79, 109, -104}, {110, 110, 750}, {111, 122, 89}, },
            {{45, 122, -741}, },
            {{45, 57, -21}, {65, 65, 751}, {66, 90, 88}, {97, 97, 752}, {98, 122, 89}, },
            {{45, 122, -743}, },
            {{45, 72, -22}, {73, 73, 753}, {74, 104, -28}, {105, 105, 754}, {106, 122, 89}, },
            {{45, 122, -745}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 45, 755}, {48, 122, -33}, },
            {{45, 122, -749}, },
            {{45, 83, -114}, {84, 84, 756}, {85, 115, -114}, {116, 116, 757}, {117, 122, 89}, },
            {{45, 122, -751}, },
            {{45, 75, -21}, {76, 76, 758}, {77, 107, -27}, {108, 108, 759}, {109, 122, 89}, },
            {{45, 122, -753}, },
            {{45, 77, -29}, {78, 78, 760}, {79, 109, -104}, {110, 110, 761}, {111, 122, 89}, },
            {{45, 122, -755}, },
            {{45, 48, -438}, {49, 49, 762}, {50, 50, 763}, {51, 51, 764}, {52, 52, 765}, {53, 53, 766}, {54, 54, 767}, {55, 122, -438}, },
            {{45, 68, -31}, {69, 69, 768}, {70, 100, -31}, {101, 101, 769}, {102, 122, 89}, },
            {{45, 122, -758}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 83, -114}, {84, 84, 770}, {85, 115, -114}, {116, 116, 771}, {117, 122, 89}, },
            {{45, 122, -762}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 81, -123}, {82, 82, 772}, {83, 113, -123}, {114, 114, 773}, {115, 122, 89}, },
            {{45, 122, -770}, },
            {{45, 68, -31}, {69, 69, 774}, {70, 100, -31}, {101, 101, 775}, {102, 122, 89}, },
            {{45, 122, -772}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 81, -123}, {82, 82, 776}, {83, 113, -123}, {114, 114, 777}, {115, 122, 89}, },
            {{45, 122, -776}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {14, 80, 0, 0, 0, 0, 80, 8, 80, 9, 10, 7, 5, 3, 6, 2, 4, 12, 12, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 0, 0, 0, 0, 0, -1, -1, -1, 13, -1, -1, -1, 13, -1, 1, 1, -1, 14, 79, 14, 79, 79, 16, 14, 15, 12, 11, 79, 79, 79, 79, 79, 79, 79, 79, 79, 23, 79, 79, 23, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 45, 79, 45, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 56, 79, 79, 56, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 72, 79, 79, 79, 72, 79, 79, 79, 79, 79, 79, 79, -1, -1, 79, 79, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 18, 18, 19, 19, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 47, 47, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 58, 58, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, -1, -1, -1, -1, -1, -1, 79, 79, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 79, 79, 79, 79, 79, 79, 79, 79, 25, 25, 32, 32, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 46, 46, 79, 79, 49, 49, 79, 79, 79, 53, 53, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 67, 67, 79, 79, 69, 69, 79, 70, 79, 70, 79, 79, 79, 79, 79, 79, 79, 79, 77, 77, -1, -1, -1, -1, -1, -1, 78, 78, 13, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, 79, 79, 79, 79, 22, 22, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 43, 43, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 53, 53, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 61, 61, 79, 79, 79, 79, 79, 79, 65, 65, 79, 79, 68, 68, 79, 79, 79, 79, 71, 71, 79, 79, 74, 74, 75, 75, 13, 13, 79, 78, 79, 78, 13, -1, 13, -1, 79, 79, 21, 21, 79, 79, 26, 27, 28, 29, 30, 31, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 38, 38, 39, 39, 79, 79, 41, 41, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 52, 52, 54, 54, 55, 55, 79, 79, 79, 79, 79, 79, 79, 79, 61, 61, 79, 79, 79, 79, 79, 79, 79, 79, 68, 68, 79, 79, 79, 79, 79, 79, 76, 76, 78, 78, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 35, 35, 79, 79, 79, 79, 79, 79, 44, 44, 79, 79, 48, 48, 79, 79, 79, 79, 79, 58, 58, 59, 59, 79, 79, 79, 79, 79, 79, 64, 64, 79, 79, 79, 79, 70, 70, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 37, 37, 79, 79, 79, 79, 79, 79, 79, 79, 51, 51, 79, 79, 79, 79, 79, 79, 79, 79, 66, 66, 79, 79, 73, 73, 20, 20, 24, 24, 79, 79, 33, 33, 79, 79, 36, 79, 79, 79, 46, 46, 50, 50, 79, 79, 79, 79, 62, 62, 63, 63, 79, 79, 79, 79, 34, 34, 79, 79, 42, 42, 50, 50, 79, 79, 79, 79, 79, 79, 79, 79, 79, 42, 42, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 69, 69, 25, 25, 79, 79, 79, 79, 79, 79, 79, 79, 79, 57, 57, 79, 79, 26, 27, 28, 29, 30, 31, 79, 79, 79, 79, 40, 40, 79, 79, 60, 60, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }
}
